{"ast":null,"code":"import JUserApi from './apis/user';\nimport JKlineApi from './apis/kline';\nimport JRtApi from './apis/rt';\nimport JGroupApi from './apis/group';\nimport JArticleApi from './apis/article';\nimport JCommentApi from './apis/comment';\n\nvar JamespotUserApi =\n/** @class */\nfunction () {\n  function JamespotUserApi() {\n    this.version = '0.1';\n    var location = window.location;\n    var host = location.host;\n    this.url = location.protocol + '//' + host + '/user-api';\n    this.url = \"https://kline-dev1.jamespot.pro/user-api\";\n    console.log('Initialize jamespot-user-api v' + this.version + ' on ' + this.url);\n  }\n\n  JamespotUserApi.prototype._postOptions = function (options) {\n    return Object.assign({\n      method: 'POST',\n      credentials: 'same-origin'\n    }, options);\n  };\n\n  JamespotUserApi.prototype._getOptions = function (options) {\n    return Object.assign({\n      method: 'GET',\n      credentials: 'same-origin'\n    }, options);\n  };\n  /**\n   * token function returns a token.\n   *\n   */\n\n\n  JamespotUserApi.prototype.token = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.fetch({\n        method: 'POST',\n        credentials: 'same-origin',\n        body: JSON.stringify({\n          o: 'misc',\n          f: 'token'\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        resolve(response.result);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  };\n  /**\n   * tokenCSRF function returns a CSRF token.\n   *\n   */\n\n\n  JamespotUserApi.prototype.tokenCSRF = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.fetch({\n        method: 'POST',\n        credentials: 'same-origin',\n        body: JSON.stringify({\n          o: 'misc',\n          f: 'tokenCSRF'\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        resolve(response.result);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  };\n\n  JamespotUserApi.prototype.send = function (url, body) {\n    return window.fetch(this.url + url, {\n      method: 'POST',\n      credentials: 'same-origin',\n      body: body\n    });\n  };\n\n  JamespotUserApi.prototype.fetch = function (init) {\n    return window.fetch(this.url, this._postOptions(init));\n  };\n\n  JamespotUserApi.prototype.samplePromise = function (param) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        return resolve(param);\n      }, 1000);\n    });\n  };\n\n  return JamespotUserApi;\n}();\n\nexport { JamespotUserApi };\nvar JamespotUserApiInstance = new JamespotUserApi();\nJamespotUserApiInstance.user = new JUserApi(JamespotUserApiInstance);\nJamespotUserApiInstance.kline = new JKlineApi(JamespotUserApiInstance);\nJamespotUserApiInstance.group = new JGroupApi(JamespotUserApiInstance);\nJamespotUserApiInstance.article = new JArticleApi(JamespotUserApiInstance);\nJamespotUserApiInstance.comment = new JCommentApi(JamespotUserApiInstance);\nJamespotUserApiInstance.rt = new JRtApi();\nwindow.JamespotUserApi = JamespotUserApiInstance;\nexport default JamespotUserApiInstance;","map":null,"metadata":{},"sourceType":"module"}