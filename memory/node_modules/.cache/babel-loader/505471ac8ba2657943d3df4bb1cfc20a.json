{"ast":null,"code":"'use strict';\n\nvar isUrl = require('is-url');\n\nvar laxUrlRegex = /(?:(?:[^:]+:)?[/][/])?(?:.+@)?([^/]+)([/][^?#]+)/;\n\nmodule.exports = function (repoUrl, opts) {\n  var obj = {};\n  opts = opts || {};\n\n  if (!repoUrl) {\n    return null;\n  } // Allow an object with nested `url` string\n  // (common practice in package.json files)\n\n\n  if (repoUrl.url) {\n    repoUrl = repoUrl.url;\n  }\n\n  if (typeof repoUrl !== 'string') {\n    return null;\n  }\n\n  var shorthand = repoUrl.match(/^([\\w-_]+)\\/([\\w-_\\.]+)(?:#([\\w-_\\.]+))?$/);\n  var mediumhand = repoUrl.match(/^github:([\\w-_]+)\\/([\\w-_\\.]+)(?:#([\\w-_\\.]+))?$/);\n  var antiquated = repoUrl.match(/^git@[\\w-_\\.]+:([\\w-_]+)\\/([\\w-_\\.]+)$/);\n\n  if (shorthand) {\n    obj.user = shorthand[1];\n    obj.repo = shorthand[2];\n    obj.branch = shorthand[3] || 'master';\n    obj.host = 'github.com';\n  } else if (mediumhand) {\n    obj.user = mediumhand[1];\n    obj.repo = mediumhand[2];\n    obj.branch = mediumhand[3] || 'master';\n    obj.host = 'github.com';\n  } else if (antiquated) {\n    obj.user = antiquated[1];\n    obj.repo = antiquated[2].replace(/\\.git$/i, '');\n    obj.branch = 'master';\n    obj.host = 'github.com';\n  } else {\n    // Turn git+http URLs into http URLs\n    repoUrl = repoUrl.replace(/^git\\+/, '');\n\n    if (!isUrl(repoUrl)) {\n      return null;\n    }\n\n    var ref = repoUrl.match(laxUrlRegex) || [];\n    var hostname = ref[1];\n    var pathname = ref[2];\n\n    if (!hostname) {\n      return null;\n    }\n\n    if (hostname !== 'github.com' && hostname !== 'www.github.com' && !opts.enterprise) {\n      return null;\n    }\n\n    var parts = pathname.match(/^\\/([\\w-_]+)\\/([\\w-_\\.]+)(\\/tree\\/[\\w-_\\.\\/]+)?(\\/blob\\/[\\w-_\\.\\/]+)?/); // ([\\w-_\\.]+)\n\n    if (!parts) {\n      return null;\n    }\n\n    obj.user = parts[1];\n    obj.repo = parts[2].replace(/\\.git$/i, '');\n    obj.host = hostname || 'github.com';\n\n    if (parts[3] && /^\\/tree\\/master\\//.test(parts[3])) {\n      obj.branch = 'master';\n      obj.path = parts[3].replace(/\\/$/, '');\n    } else if (parts[3]) {\n      obj.branch = parts[3].replace(/^\\/tree\\//, '').match(/[\\w-_.]+\\/{0,1}[\\w-_]+/)[0];\n    } else if (parts[4]) {\n      obj.branch = parts[4].replace(/^\\/blob\\//, '').match(/[\\w-_.]+\\/{0,1}[\\w-_]+/)[0];\n    } else {\n      obj.branch = 'master';\n    }\n  }\n\n  if (obj.host === 'github.com') {\n    obj.apiHost = 'api.github.com';\n  } else {\n    obj.apiHost = obj.host + \"/api/v3\";\n  }\n\n  obj.tarball_url = \"https://\" + obj.apiHost + \"/repos/\" + obj.user + \"/\" + obj.repo + \"/tarball/\" + obj.branch;\n  obj.clone_url = \"https://\" + obj.host + \"/\" + obj.user + \"/\" + obj.repo;\n\n  if (obj.branch === 'master') {\n    obj.https_url = \"https://\" + obj.host + \"/\" + obj.user + \"/\" + obj.repo;\n    obj.travis_url = \"https://travis-ci.org/\" + obj.user + \"/\" + obj.repo;\n    obj.zip_url = \"https://\" + obj.host + \"/\" + obj.user + \"/\" + obj.repo + \"/archive/master.zip\";\n  } else {\n    obj.https_url = \"https://\" + obj.host + \"/\" + obj.user + \"/\" + obj.repo + \"/blob/\" + obj.branch;\n    obj.travis_url = \"https://travis-ci.org/\" + obj.user + \"/\" + obj.repo + \"?branch=\" + obj.branch;\n    obj.zip_url = \"https://\" + obj.host + \"/\" + obj.user + \"/\" + obj.repo + \"/archive/\" + obj.branch + \".zip\";\n  } // Support deep paths (like lerna-style repos)\n\n\n  if (obj.path) {\n    obj.https_url += obj.path;\n  }\n\n  obj.api_url = \"https://\" + obj.apiHost + \"/repos/\" + obj.user + \"/\" + obj.repo;\n  return obj;\n};","map":null,"metadata":{},"sourceType":"script"}