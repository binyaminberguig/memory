{"ast":null,"code":"const assert = require('assert');\n\nconst isURL = require('is-url');\n\nconst isDev = require('electron-is-dev');\n\nconst ms = require('ms');\n\nconst gh = require('github-url-to-object');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst _require = require('util'),\n      format = _require.format;\n\nconst pkg = require('./package.json');\n\nconst userAgent = format('%s/%s (%s: %s)', pkg.name, pkg.version, os.platform(), os.arch());\nconst supportedPlatforms = ['darwin', 'win32'];\n\nmodule.exports = function updater(opts = {}) {\n  // check for bad input early, so it will be logged during development\n  opts = validateInput(opts); // don't attempt to update during development\n\n  if (isDev) {\n    const message = 'update-electron-app config looks good; aborting updates since app is in development mode';\n    opts.logger ? opts.logger.log(message) : console.log(message);\n    return;\n  }\n\n  opts.electron.app.isReady() ? initUpdater(opts) : opts.electron.app.on('ready', () => initUpdater(opts));\n};\n\nfunction initUpdater(opts) {\n  const host = opts.host,\n        repo = opts.repo,\n        updateInterval = opts.updateInterval,\n        logger = opts.logger,\n        electron = opts.electron;\n  const app = electron.app,\n        autoUpdater = electron.autoUpdater,\n        dialog = electron.dialog;\n  const feedURL = \"\".concat(host, \"/\").concat(repo, \"/\").concat(process.platform, \"-\").concat(process.arch, \"/\").concat(app.getVersion());\n  const requestHeaders = {\n    'User-Agent': userAgent\n  };\n\n  function log(...args) {\n    logger.log(...args);\n  } // exit early on unsupported platforms, e.g. `linux`\n\n\n  if (typeof process !== 'undefined' && process.platform && !supportedPlatforms.includes(process.platform)) {\n    log(\"Electron's autoUpdater does not support the '\".concat(process.platform, \"' platform\"));\n    return;\n  }\n\n  log('feedURL', feedURL);\n  log('requestHeaders', requestHeaders);\n  autoUpdater.setFeedURL(feedURL, requestHeaders);\n  autoUpdater.on('error', err => {\n    log('updater error');\n    log(err);\n  });\n  autoUpdater.on('checking-for-update', () => {\n    log('checking-for-update');\n  });\n  autoUpdater.on('update-available', () => {\n    log('update-available; downloading...');\n  });\n  autoUpdater.on('update-not-available', () => {\n    log('update-not-available');\n  });\n  autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName, releaseDate, updateURL) => {\n    log('update-downloaded', arguments);\n    const dialogOpts = {\n      type: 'info',\n      buttons: ['Restart', 'Later'],\n      title: 'Application Update',\n      message: process.platform === 'win32' ? releaseNotes : releaseName,\n      detail: 'A new version has been downloaded. Restart the application to apply the updates.'\n    };\n    dialog.showMessageBox(dialogOpts, response => {\n      if (response === 0) autoUpdater.quitAndInstall();\n    });\n  }); // check for updates right away and keep checking later\n\n  autoUpdater.checkForUpdates();\n  setInterval(() => {\n    autoUpdater.checkForUpdates();\n  }, ms(updateInterval));\n}\n\nfunction validateInput(opts) {\n  const defaults = {\n    host: 'https://update.electronjs.org',\n    updateInterval: '10 minutes',\n    logger: console\n  };\n\n  const _Object$assign = Object.assign({}, defaults, opts),\n        host = _Object$assign.host,\n        updateInterval = _Object$assign.updateInterval,\n        logger = _Object$assign.logger; // allows electron to be mocked in tests\n\n\n  const electron = opts.electron || require('electron');\n\n  let repo = opts.repo;\n\n  if (!repo) {\n    const pkgBuf = fs.readFileSync(path.join(electron.app.getAppPath(), 'package.json'));\n    const pkg = JSON.parse(pkgBuf.toString());\n    const repoString = pkg.repository && pkg.repository.url || pkg.repository;\n    const repoObject = gh(repoString);\n    assert(repoObject, 'repo not found. Add repository string to your app\\'s package.json file');\n    repo = \"\".concat(repoObject.user, \"/\").concat(repoObject.repo);\n  }\n\n  assert(repo && repo.length && repo.includes('/'), 'repo is required and should be in the format `owner/repo`');\n  assert(isURL(host) && host.startsWith('https'), 'host must be a valid HTTPS URL');\n  assert(typeof updateInterval === 'string' && updateInterval.match(/^\\d+/), 'updateInterval must be a human-friendly string interval like `20 minutes`');\n  assert(ms(updateInterval) >= 5 * 60 * 1000, 'updateInterval must be `5 minutes` or more');\n  assert(logger && typeof logger.log, 'function');\n  return {\n    host,\n    repo,\n    updateInterval,\n    logger,\n    electron\n  };\n}","map":null,"metadata":{},"sourceType":"script"}