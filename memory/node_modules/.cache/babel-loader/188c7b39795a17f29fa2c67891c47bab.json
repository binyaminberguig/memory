{"ast":null,"code":"import JUser from '../classes/JUser';\n\nvar JUserApi =\n/** @class */\nfunction () {\n  function JUserApi(jApi) {\n    JUserApi.jApi = jApi;\n  }\n  /**\n   * signIn function returns a Promise of JUser.\n   *\n   * @param name Mail or username\n   * @param pwd Password to be validated\n   */\n\n\n  JUserApi.prototype.signIn = function (mail, pwd) {\n    return new Promise(function (resolve, reject) {\n      JUserApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'user',\n          f: 'signIn',\n          mail: mail,\n          password: pwd\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0 && response.result) {\n          var jUser = new JUser(response.result.id, response.result.type);\n          jUser.hydrate(response.result);\n          resolve(jUser);\n        } else {\n          reject('Wrong login/pwd');\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n  /**\n   * autocomplete return a list or JUser\n   *\n   * @param query <string>\n   */\n\n\n  JUserApi.prototype.autocomplete = function (query) {\n    return new Promise(function (resolve, reject) {\n      JUserApi.jApi.fetch({\n        method: 'POST',\n        credentials: 'same-origin',\n        body: JSON.stringify({\n          o: 'autocomplete',\n          f: 'user',\n          q: query,\n          idToUri: false\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        var arr = [];\n\n        if (response.error === 0 && response.result) {\n          if (Array.isArray(response.result)) {\n            response.result.map(function (user) {\n              var jUser = new JUser(user.idUser, user.type);\n              jUser.hydrate(user);\n              arr.push(jUser);\n            });\n          }\n        }\n\n        resolve(arr);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  };\n  /**\n   * get function returns a Promise of JUser.\n   *\n   * @param idUser idUser\n   */\n\n\n  JUserApi.prototype.get = function (idUser) {\n    return new Promise(function (resolve, reject) {\n      JUserApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'user',\n          f: 'get',\n          idUser: idUser\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0 && response.result) {\n          var jUser = new JUser(response.result.id, response.result.type);\n          jUser.hydrate(response.result);\n          resolve(jUser);\n        } else {\n          reject('No user');\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n  /*\n   * Session will return a Promise of Session params.\n   */\n\n\n  JUserApi.prototype.session = function () {\n    return new Promise(function (resolve, reject) {\n      JUserApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'user',\n          f: 'session'\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (obj) {\n        resolve(obj.result);\n      }).catch(function (error) {\n        reject({\n          error: true\n        });\n      });\n    });\n  };\n\n  return JUserApi;\n}();\n\nexport default JUserApi;","map":null,"metadata":{},"sourceType":"module"}