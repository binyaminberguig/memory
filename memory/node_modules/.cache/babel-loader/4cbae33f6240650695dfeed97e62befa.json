{"ast":null,"code":"import { Observable } from 'rxjs/Observable';\nimport * as socketIo from 'socket.io-client';\n\nvar JRtApi =\n/** @class */\nfunction () {\n  /**\n   * Creates a JRtApi object.\n   */\n  function JRtApi() {\n    this.debug = false;\n  }\n\n  JRtApi.prototype.init = function () {\n    JRtApi.socket = socketIo.connect('//');\n\n    if (this.debug) {\n      console.log('open socket');\n      JRtApi.socket.on('message', function (data) {\n        console.log('debug message :', data);\n      });\n      JRtApi.socket.on('connect', function () {\n        console.log('connected!');\n      });\n      JRtApi.socket.on('disconnect', function () {\n        console.log('disconnected!');\n      });\n    }\n  };\n\n  JRtApi.prototype.send = function (message) {\n    JRtApi.socket.emit('message', message);\n  };\n\n  JRtApi.prototype.emit = function (event, message) {\n    JRtApi.socket.emit(event, message);\n  };\n\n  JRtApi.prototype.onMessage = function () {\n    return new Observable(function (observer) {\n      JRtApi.socket.on('message', function (data) {\n        return observer.next(data);\n      });\n    });\n  };\n\n  JRtApi.prototype.onEvent = function (event) {\n    return new Observable(function (observer) {\n      JRtApi.socket.on(event, function (data) {\n        return observer.next(data);\n      });\n    });\n  };\n\n  return JRtApi;\n}();\n\nexport default JRtApi;","map":null,"metadata":{},"sourceType":"module"}