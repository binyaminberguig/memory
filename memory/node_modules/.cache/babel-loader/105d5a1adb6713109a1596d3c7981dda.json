{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\appli react\\\\memory\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\n\nrequire('update-electron-app')();\n\nconsole.log(jamespot);\nconst VISUAL_PAUSE_MSECS = 750;\nconst SIDE = 6;\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      //tableau des cartes\n      currentPair: [],\n      //currentPair represente l'index de la carte selectionne\n      guesses: 0,\n      //nbr d'essai\n      halloffame: null,\n      //tableau des scores\n      matchedCardIndices: [] //Indice des cartes reussies \n\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        hallOfFame\n      });\n    };\n\n    this.handleCardClick = index => {\n      //la carte actuelle recupere les states de l'objet actuel\n      const currentPair = this.state.currentPair; //si 2 carte etaient decouvertes\n\n      if (currentPair.length === 2) {\n        return;\n      } //si 1 cartes decouverte car dans le passe le tableau etait vide\n\n\n      if (currentPair.length === 0) {\n        //je rajoute la carte actuelle a currentPair\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      } //si je clique sur la deuxieme carte dans mon tableau il y a une carte dans mon tableau current\n\n\n      this.handleNewPairClosedBy(index);\n    };\n  }\n\n  componentWillMount() {\n    console.log('mount');\n  } // Arrow fx for binding recupere le tableau des scores\n\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE; //melange des symboles\n\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      //.pop sert a supprimer le dernier element et a le retourne\n      const card = candidates.pop(); //je rajoute 2 fois les cartes\n\n      result.push(card, card);\n    } //je remelange la pioche\n\n\n    return shuffle(result);\n  } // dire si une carte doit etre retourne ou affiche\n\n\n  getFeedbackForCard(index) {\n    // je recupere l'indice de la premiere carte currentpair et l'indice des cartes retournees\n    const _this$state = this.state,\n          currentPair = _this$state.currentPair,\n          matchedCardIndices = _this$state.matchedCardIndices; //.include signifie est ce que le tableau contient l'index\n    //si l'index de la carte est deja dans la collec matché grace a la fonction handleclick\n\n    const indexMatched = matchedCardIndices.includes(index); //si il y a une carte ou zero dans mon ancien tableau \n\n    if (currentPair.length < 2) {\n      //si index matched ou si element courant(premier element de currentPair) j'affiche\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    } //pour les deux cartes du tableau current\n\n\n    if (currentPair.includes(index)) {\n      //si l 'index de la carte selectionne est dans les cartes matchés alors justMatched sinon justMismatched\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  handleApiClick() {\n    /*\n    jamespot.user.signIn('antony.meunier@jamespot.com', 'A').then((response) => {\n        console.log(response);\n      })\n    */\n    jamespot.user.autocomplete('a').then(response => {\n      console.log(response);\n    });\n  } // Arrow fx for binding\n  //fonction handlecardclick qui prend un index en param\n\n\n  handleNewPairClosedBy(index) {\n    const _this$state2 = this.state,\n          cards = _this$state2.cards,\n          currentPair = _this$state2.currentPair,\n          guesses = _this$state2.guesses,\n          matchedCardIndices = _this$state2.matchedCardIndices;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1; //Verification si les deux cartes sont egales\n\n    const matched = cards[newPair[0]] === cards[newPair[1]] && newPair[0] !== newPair[1];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      //si c'est les memes cartes je modifie l'indice des cartes matchés en ajoutant les nouvels indices\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    //au debut du render je dois recuperer les variables locales (le state)\n    const _this$state3 = this.state,\n          cards = _this$state3.cards,\n          guesses = _this$state3.guesses,\n          hallOfFame = _this$state3.hallOfFame,\n          matchedCardIndices = _this$state3.matchedCardIndices; // won prend la variable vrai si les cartes matchées sont egales au nbr de carte total\n\n    const won = matchedCardIndices.length === cards.length;\n    return React.createElement(\"div\", {\n      className: \"memory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleApiClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"api test\"), React.createElement(GuessCount, {\n      guesses: guesses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), // j'appelle chacune des images de cards, l'index est instancier automatiquement \n    //puis j'appelle les composants card un par un et je les instacie \n    // cards.map represente le changement du tableau cards \n    cards.map((card, index) => React.createElement(Card, {\n      card: card,\n      feedback: this.getFeedbackForCard(index),\n      index: index,\n      key: index,\n      onClick: this.handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), won && (hallOfFame ? React.createElement(HallOfFame, {\n      entries: hallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }) : React.createElement(HighScoreInput, {\n      guesses: guesses,\n      onStored: this.displayHallOfFame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Admin\\Documents\\appli react\\memory\\src\\App.js"],"names":["React","Component","shuffle","Card","GuessCount","HallOfFame","HighScoreInput","require","console","log","jamespot","VISUAL_PAUSE_MSECS","SIDE","SYMBOLS","App","state","cards","generateCards","currentPair","guesses","halloffame","matchedCardIndices","displayHallOfFame","hallOfFame","setState","handleCardClick","index","length","handleNewPairClosedBy","componentWillMount","result","size","candidates","card","pop","push","getFeedbackForCard","indexMatched","includes","handleApiClick","user","autocomplete","then","response","newPair","newGuesses","matched","setTimeout","render","won","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\nimport './App.css'\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nrequire('update-electron-app')()\n\nconsole.log(jamespot);\n\nconst VISUAL_PAUSE_MSECS = 750\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),  //tableau des cartes\n    currentPair: [],              //currentPair represente l'index de la carte selectionne\n    guesses: 0,                   //nbr d'essai\n    halloffame: null,             //tableau des scores\n    matchedCardIndices: [],       //Indice des cartes reussies \n    \n  }\n\n\n\n\n  componentWillMount(){\n    console.log('mount');\n\n    \n  }\n\n\n\n\n// Arrow fx for binding recupere le tableau des scores\ndisplayHallOfFame = (hallOfFame) => {\n  this.setState({ hallOfFame })\n}\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    //melange des symboles\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      //.pop sert a supprimer le dernier element et a le retourne\n      const card = candidates.pop()\n      //je rajoute 2 fois les cartes\n      result.push(card, card)\n    }\n    //je remelange la pioche\n    return shuffle(result)\n  }\n\n\n// dire si une carte doit etre retourne ou affiche\n  getFeedbackForCard(index) {  \n    // je recupere l'indice de la premiere carte currentpair et l'indice des cartes retournees\n  const { currentPair, matchedCardIndices } = this.state\n  //.include signifie est ce que le tableau contient l'index\n  //si l'index de la carte est deja dans la collec matché grace a la fonction handleclick\n  const indexMatched = matchedCardIndices.includes(index)\n\n  //si il y a une carte ou zero dans mon ancien tableau \n  if (currentPair.length < 2) {\n    //si index matched ou si element courant(premier element de currentPair) j'affiche\n    return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n  }\n\n  //pour les deux cartes du tableau current\n  if (currentPair.includes(index)) {\n    //si l 'index de la carte selectionne est dans les cartes matchés alors justMatched sinon justMismatched\n    return indexMatched ? 'justMatched' : 'justMismatched'\n\n  }\n\n  return indexMatched ? 'visible' : 'hidden'\n}\n\n\nhandleApiClick(){\n  /*\n  jamespot.user.signIn('antony.meunier@jamespot.com', 'A').then((response) => {\n      console.log(response);\n    })\n*/\n\n  jamespot.user.autocomplete('a').then((response) => {\n      console.log(response);\n    })\n}\n\n  // Arrow fx for binding\n  //fonction handlecardclick qui prend un index en param\nhandleCardClick = index => {\n  //la carte actuelle recupere les states de l'objet actuel\n  const { currentPair } = this.state\n\n  //si 2 carte etaient decouvertes\n  if (currentPair.length === 2) {\n    return\n  }\n  //si 1 cartes decouverte car dans le passe le tableau etait vide\n  if (currentPair.length === 0) {\n    //je rajoute la carte actuelle a currentPair\n    this.setState({ currentPair: [index] })\n    return\n  }\n  //si je clique sur la deuxieme carte dans mon tableau il y a une carte dans mon tableau current\n  this.handleNewPairClosedBy(index)\n}\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    //Verification si les deux cartes sont egales\n    const matched = cards[newPair[0]] === cards[newPair[1]] && newPair[0]!==newPair[1]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      //si c'est les memes cartes je modifie l'indice des cartes matchés en ajoutant les nouvels indices\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n   \n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n render() {\n  //au debut du render je dois recuperer les variables locales (le state)\n   \n  const { cards, guesses, hallOfFame, matchedCardIndices } = this.state\n  // won prend la variable vrai si les cartes matchées sont egales au nbr de carte total\n  const won = matchedCardIndices.length === cards.length\n\n  return (\n    <div className=\"memory\">\n      <button onClick={this.handleApiClick}>api test</button>\n      <GuessCount guesses={guesses} />\n     {\n      // j'appelle chacune des images de cards, l'index est instancier automatiquement \n      //puis j'appelle les composants card un par un et je les instacie \n      // cards.map represente le changement du tableau cards \n        cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))\n      }\n     \n          {won && \n             (hallOfFame ? (<HallOfFame entries={hallOfFame} />) \n                          : \n                          (<HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />))\n          } \n         \n        </div>\n      )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}