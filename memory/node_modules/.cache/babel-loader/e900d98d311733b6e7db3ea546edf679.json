{"ast":null,"code":"import JUser from '../classes/JUser';\nimport JArticle from '../classes/JArticle';\nimport JComment from '../classes/JComment';\n\nvar JKlineFeedApi =\n/** @class */\nfunction () {\n  function JKlineFeedApi() {}\n  /**\n   * feed create function return a new feed item\n   *\n   * @param name <string>\n   * @param idProject <number>\n   */\n\n\n  JKlineFeedApi.prototype.create = function (body, idProject) {\n    return new Promise(function (resolve, reject) {\n      return JKlineFeedApi.jApi.token().then(function (token) {\n        return JKlineFeedApi.jApi.send('?o=kline&f=feedCreate', body).then(function (resp) {\n          return resp.json();\n        }).then(function (response) {\n          if (response.error === 0) {\n            var jArticle = new JArticle(response.result.id, response.result.type);\n            jArticle.hydrate(response.result);\n            resolve(jArticle);\n          } else {\n            reject([]);\n          }\n        }).catch(function (e) {\n          reject(e);\n        });\n      });\n    });\n  };\n  /**\n   * return all kline available types\n   *\n   */\n\n\n  JKlineFeedApi.prototype.types = function () {\n    return new Promise(function (resolve, reject) {\n      return JKlineFeedApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'feedTypes'\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          resolve(response.result);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n  /**\n   * get function returns a project\n   *\n   * @param idFeed <number>\n   * @param content <string>\n   */\n\n\n  JKlineFeedApi.prototype.addMessage = function (idFeed, content) {\n    return new Promise(function (resolve, reject) {\n      return JKlineFeedApi.jApi.token().then(function (token) {\n        return JKlineFeedApi.jApi.fetch({\n          body: JSON.stringify({\n            o: 'kline',\n            f: 'addMessage',\n            idArticle: idFeed,\n            content: content,\n            token: token\n          })\n        }).then(function (resp) {\n          return resp.json();\n        }).then(function (response) {\n          if (response.error === 0) {\n            var jComment = new JComment(response.result.id, response.result.type);\n            jComment.hydrate(response.result);\n            resolve(response.result);\n          } else {\n            reject([]);\n          }\n        }).catch(function (e) {\n          reject(e);\n        });\n      });\n    });\n  };\n\n  JKlineFeedApi.prototype.discussion = function (idFeed, limit, p) {\n    if (limit === void 0) {\n      limit = 20;\n    }\n\n    if (p === void 0) {\n      p = 1;\n    }\n\n    return new Promise(function (resolve, reject) {\n      return JKlineFeedApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'discussion',\n          idArticle: idFeed,\n          limit: limit\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          var arr_1 = [];\n\n          if (Array.isArray(response.result)) {\n            response.result.map(function (comment) {\n              var jComment = new JComment(comment.id, comment.type);\n              jComment.hydrate(comment);\n              arr_1.push(jComment);\n            });\n          }\n\n          resolve(arr_1);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  return JKlineFeedApi;\n}();\n\nvar JKlineProjectApi =\n/** @class */\nfunction () {\n  function JKlineProjectApi() {}\n  /**\n   * list function returns a list of projects\n   *\n   */\n\n\n  JKlineProjectApi.prototype.list = function () {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectList'\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          resolve(response.result);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  JKlineProjectApi.prototype.invite = function (idProject, members) {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectInvite',\n          idProject: idProject,\n          members: members\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          resolve(response.result);\n        } else {\n          reject(false);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n  /**\n   * create function returns a new project\n   *\n   * @param name <string>\n   */\n\n\n  JKlineProjectApi.prototype.create = function (name) {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectCreate',\n          name: name\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          resolve(response.result);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n  /**\n   * get function returns a project\n   *\n   * @param idProject <number>\n   */\n\n\n  JKlineProjectApi.prototype.get = function (idProject) {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectGet',\n          idProject: idProject\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          resolve(response.result);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n  /**\n   * members function returns an array of JUser\n   *\n   * @param idProject <number>\n   */\n\n\n  JKlineProjectApi.prototype.members = function (idProject) {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectMembers',\n          idProject: idProject\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          var list_1 = [];\n          response.result.map(function (user) {\n            var jUser = new JUser(user.id, user.type);\n            jUser.hydrate(user);\n            list_1.push(jUser);\n          });\n          resolve(list_1);\n        } else {\n          reject([]);\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n  /**\n   * feeds function returns an array of feed object (article, document, todo, etc...)\n   *\n   * @param idProject <number>\n   */\n\n\n  JKlineProjectApi.prototype.feeds = function (idProject) {\n    return new Promise(function (resolve, reject) {\n      return JKlineProjectApi.jApi.fetch({\n        body: JSON.stringify({\n          o: 'kline',\n          f: 'projectFeeds',\n          idProject: idProject\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (response) {\n        if (response.error === 0) {\n          var jArticle = new JArticle(response.result.id, response.result.type);\n          jArticle.hydrate(response.result);\n          resolve(response.result);\n        } else {\n          reject('api error');\n        }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  };\n\n  return JKlineProjectApi;\n}();\n\nvar JKlineApi =\n/** @class */\nfunction () {\n  function JKlineApi(jApi) {\n    JKlineProjectApi.jApi = jApi;\n    JKlineFeedApi.jApi = jApi;\n  }\n  /**\n   * feed function returns a JKlineFeedApi.\n   *\n   */\n\n\n  JKlineApi.prototype.feed = function () {\n    return new JKlineFeedApi();\n  };\n  /**\n   * feed function returns a JKlineProjectApi.\n   *\n   */\n\n\n  JKlineApi.prototype.project = function () {\n    return new JKlineProjectApi();\n  };\n\n  return JKlineApi;\n}();\n\nexport default JKlineApi;","map":null,"metadata":{},"sourceType":"module"}